{
    "!name": "backbrace-types",
    "!define": {},
    "GenericFunction": {
        "!type": "fn(args: ?) -> ?",
        "!doc": "Alias for `Function`. Use this where you have repeatable function params."
    },
    "Key": {
        "!type": "number",
        "!doc": "Array key."
    },
    "T": {
        "!type": "?",
        "!doc": "Any type."
    },
    "window": {
        "!type": "<top>",
        "!url": "https://developer.mozilla.org/en/docs/DOM/window",
        "!doc": "The window object represents a window containing a DOM document."
    },
    "ErrorHandler": {
        "!type": "fn(msg: string|Error, args: ?) -> ?",
        "!doc": "Error handler function."
    },
    "PageField": {
        "name": {
            "!type": "string"
        },
        "caption": {
            "!type": "string"
        },
        "type": {
            "!type": "string"
        },
        "component": {
            "!type": "string"
        },
        "width": {
            "!type": "string"
        },
        "editable": {
            "!type": "bool"
        },
        "hidden": {
            "!type": "bool"
        },
        "className": {
            "!type": "string"
        }
    },
    "PageAction": {
        "name": {
            "!type": "string"
        },
        "text": {
            "!type": "string"
        },
        "icon": {
            "!type": "string"
        },
        "iconColor": {
            "!type": "string"
        },
        "className": {
            "!type": "string"
        }
    },
    "PageSection": {
        "name": {
            "!type": "string"
        },
        "text": {
            "!type": "string"
        },
        "pageName": {
            "!type": "string"
        },
        "icon": {
            "!type": "string"
        },
        "className": {
            "!type": "string"
        },
        "fields": {
            "!type": "[PageField]"
        }
    },
    "PageMeta": {
        "name": {
            "!type": "string"
        },
        "caption": {
            "!type": "string"
        },
        "component": {
            "!type": "string"
        },
        "controller": {
            "!type": "string"
        },
        "tableName": {
            "!type": "string"
        },
        "icon": {
            "!type": "string"
        },
        "actions": {
            "!type": "[PageAction]"
        },
        "sections": {
            "!type": "[PageSection]"
        }
    },
    "JQueryPromise": {
        "!url": "http://api.jquery.com/jQuery.Deferred/",
        "!doc": "A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.",
        "prototype": {
            "always": "fn(callback: fn()) -> +jQuery.Promise",
            "done": "fn(callback: fn()) -> +jQuery.Promise",
            "fail": "fn(callback: fn()) -> +jQuery.Promise",
            "isRejected": "fn() -> bool",
            "isResolved": "fn() -> bool",
            "pipe": "fn(doneFilter?: fn(), failFilter?: fn()) -> +jQuery.Promise",
            "promise": "fn(target: ?) -> +jQuery.Deferred",
            "state": "fn() -> string",
            "then": "fn(doneFilter: fn(), failFilter?: fn(), progressFilter?: fn()) -> +jQuery.Promise"
        }
    }
}